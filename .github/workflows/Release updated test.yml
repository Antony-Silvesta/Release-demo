name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      selenium:
        image: selenium/standalone-chrome:latest  # Using Selenium Chrome standalone service
        options: --shm-size 2g  # Increase shared memory size for Chrome

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Specify the Node.js version

      - name: Install Node.js dependencies
        run: npm install  # Install all project dependencies

      - name: Build frontend
        run: npm run build  # Build the frontend application

      - name: Check Docker version
        run: docker --version

      - name: Build Docker image
        run: docker build -t my-selenium-app:latest .  # Build the Docker image

      - name: Save Docker image
        run: docker image save my-selenium-app:latest | xz -z -e -7 -T0 > image.xz  # Save the Docker image in compressed form

      - name: List Files
        run: ls -la  # Verify that image.xz was created

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}  # Use the run number as the version tag
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically available in Actions

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: image.xz  # Path to the compressed Docker image
          asset_name: image.xz
          asset_content_type: application/x-xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Selenium tests
        id: run_tests
        run: |
         - name: Run Google Search Test
           run: |
          python - <<EOF
          from selenium import webdriver

         def test_google_search():
         # Set Chrome options
         options = webdriver.ChromeOptions()
         options.add_argument("--no-sandbox")  # Bypass OS security model
         options.add_argument("--disable-dev-shm-usage")  # Overcome resource problems

         # Initialize the Chrome WebDriver
         driver = webdriver.Chrome(options=options)  # This will launch a Chrome browser window

         # Open Google and verify the title
         driver.get("https://www.google.com")
         assert "Google" in driver.title, "Google search page did not load properly"

         # Close the browser
         driver.quit()

         if __name__ == "__main__":
         test_google_search()
         EOF

      
      - name: Show test results
        run: echo "Selenium tests executed."

      - name: Confirm test execution
        if: ${{ steps.run_tests.outcome == 'success' }}
        run: echo "Selenium tests executed successfully."

      - name: Handle test failure
        if: ${{ steps.run_tests.outcome != 'success' }}
        run: |
            echo "Selenium tests failed. Please check the logs for details."
