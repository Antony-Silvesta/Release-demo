name: Run Selenium Tests and Create Release
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
permissions:
  contents: write
  actions: read
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      selenium:
        image: selenium/standalone-chrome:latest  # Using Selenium Chrome standalone service
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Ensure requirements.txt includes selenium and pytest
          
      - name: Check Docker version
        run: docker --version
        
      - name: Build Docker image
        run: |
          docker build -t my-selenium-app:latest .  # Build the Docker image
          
      - name: Save Docker image
        run: docker image save my-selenium-app:latest | xz -z -e -7 -T0 > image.xz  # Save the Docker image in compressed form
        
      - name: List Files
        run: ls -la  # Verify that image.xz was created
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}  # Use the run number as the version tag
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically available in Actions
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: image.xz  # Path to the compressed Docker image
          asset_name: image.xz
          asset_content_type: application/x-xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run Selenium tests
        run: |
          # Example of running a Selenium script that opens a popup
          python - <<EOF
          from selenium import webdriver

def test_google_search():
    # Set Chrome options
    options = webdriver.ChromeOptions()

    # Initialize the Chrome WebDriver
    driver = webdriver.Chrome(options=options)  # This will launch a Chrome browser window

    # Open Google and verify the title
    driver.get("https://www.google.com")
    assert "Google" in driver.title, "Google search page did not load properly"
    
    # Close the browser
    driver.quit()
          # You can perform actions on the popup here
          # For example, you could switch to the popup window if needed
          driver.switch_to.window(driver.window_handles[1])  # Switch to the popup window
          # Perform actions in the popup

          # Close the popup window and switch back
          driver.close()  # Close the popup
          driver.switch_to.window(driver.window_handles[0])  # Switch back to the main window

          # Clean up
          driver.quit()
          EOF
          
      - name: Show test results log
        run: cat test_results.log  # Display test results for debugging
        
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test_results.log  # Upload test results as an artifact for easier access
