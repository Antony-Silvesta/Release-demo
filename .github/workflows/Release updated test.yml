name: Run Selenium Tests and Create Release
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
permissions:
  contents: write
  actions: read
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      selenium:
        image: selenium/standalone-chrome:latest  # Using Selenium Chrome standalone service
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Ensure requirements.txt includes selenium and pytest
          
      - name: Check Docker version
        run: docker --version
        
      - name: Build Docker image
        run: |
          docker build -t my-selenium-app:latest .  # Build the Docker image
          
      - name: Save Docker image
        run: docker image save my-selenium-app:latest | xz -z -e -7 -T0 > image.xz  # Save the Docker image in compressed form
        
      - name: List Files
        run: ls -la  # Verify that image.xz was created
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}  # Use the run number as the version tag
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically available in Actions
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: image.xz  # Path to the compressed Docker image
          asset_name: image.xz
          asset_content_type: application/x-xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run Selenium tests
        run: |
          # Example of running a Selenium script that opens a popup
          python - <<EOF
          from selenium import webdriver
          from selenium.webdriver.chrome.service import Service
          from selenium.webdriver.common.by import By
          from webdriver_manager.chrome import ChromeDriverManager
          import time
          import pytest

          # Function to perform the Google search test
          def test_google_search():
              # Set Chrome options
              options = webdriver.ChromeOptions()
              options.add_argument("--headless")  # Run headless to avoid GUI issues in CI
              options.add_argument("--no-sandbox")  # Bypass OS security model
              options.add_argument("--disable-dev-shm-usage")  # Overcome limited resource problems
              
              # Initialize the Chrome WebDriver
              driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

              try:
                  # Open Google and verify the title
                  driver.get("https://www.google.com")
                  assert "Google" in driver.title, "Google search page did not load properly"

                  # Example of a potential popup action (e.g., clicking a link that opens a popup)
                  # driver.find_element(By.LINK_TEXT, "Some Popup Link").click()  # Replace with your actual link
                  
                  # Add any additional actions needed for the popup here
                  
              finally:
                  # Close the browser
                  driver.quit()

          if __name__ == "__main__":
              pytest.main([__file__])  # Execute the test
          EOF
          
      - name: Show test results log
        run: cat test_results.log  # Display test results for debugging
        
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test_results.log  # Upload test results as an artifact for easier access
